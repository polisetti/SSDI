package com.test.model.view;

import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 28 13:44:23 EDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TestStockPricesVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Stockid {
            public Object get(TestStockPricesVORowImpl obj) {
                return obj.getStockid();
            }

            public void put(TestStockPricesVORowImpl obj, Object value) {
                obj.setStockid((Number)value);
            }
        }
        ,
        Datetracked {
            public Object get(TestStockPricesVORowImpl obj) {
                return obj.getDatetracked();
            }

            public void put(TestStockPricesVORowImpl obj, Object value) {
                obj.setDatetracked((Number)value);
            }
        }
        ,
        Timetracked {
            public Object get(TestStockPricesVORowImpl obj) {
                return obj.getTimetracked();
            }

            public void put(TestStockPricesVORowImpl obj, Object value) {
                obj.setTimetracked((Number)value);
            }
        }
        ,
        Price {
            public Object get(TestStockPricesVORowImpl obj) {
                return obj.getPrice();
            }

            public void put(TestStockPricesVORowImpl obj, Object value) {
                obj.setPrice((Number)value);
            }
        }
        ,
        RowID {
            public Object get(TestStockPricesVORowImpl obj) {
                return obj.getRowID();
            }

            public void put(TestStockPricesVORowImpl obj, Object value) {
                obj.setRowID((RowID)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TestStockPricesVORowImpl object);

        public abstract void put(TestStockPricesVORowImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int STOCKID = AttributesEnum.Stockid.index();
    public static final int DATETRACKED = AttributesEnum.Datetracked.index();
    public static final int TIMETRACKED = AttributesEnum.Timetracked.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int ROWID = AttributesEnum.RowID.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TestStockPricesVORowImpl() {
    }

    /**
     * Gets TestStockPricesEO entity object.
     * @return the TestStockPricesEO
     */
    public EntityImpl getTestStockPricesEO() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for STOCKID using the alias name Stockid.
     * @return the STOCKID
     */
    public Number getStockid() {
        return (Number) getAttributeInternal(STOCKID);
    }

    /**
     * Sets <code>value</code> as attribute value for STOCKID using the alias name Stockid.
     * @param value value to set the STOCKID
     */
    public void setStockid(Number value) {
        setAttributeInternal(STOCKID, value);
    }

    /**
     * Gets the attribute value for DATETRACKED using the alias name Datetracked.
     * @return the DATETRACKED
     */
    public Number getDatetracked() {
        return (Number) getAttributeInternal(DATETRACKED);
    }

    /**
     * Sets <code>value</code> as attribute value for DATETRACKED using the alias name Datetracked.
     * @param value value to set the DATETRACKED
     */
    public void setDatetracked(Number value) {
        setAttributeInternal(DATETRACKED, value);
    }

    /**
     * Gets the attribute value for TIMETRACKED using the alias name Timetracked.
     * @return the TIMETRACKED
     */
    public Number getTimetracked() {
        return (Number) getAttributeInternal(TIMETRACKED);
    }

    /**
     * Sets <code>value</code> as attribute value for TIMETRACKED using the alias name Timetracked.
     * @param value value to set the TIMETRACKED
     */
    public void setTimetracked(Number value) {
        setAttributeInternal(TIMETRACKED, value);
    }

    /**
     * Gets the attribute value for PRICE using the alias name Price.
     * @return the PRICE
     */
    public Number getPrice() {
        return (Number) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as attribute value for PRICE using the alias name Price.
     * @param value value to set the PRICE
     */
    public void setPrice(Number value) {
        setAttributeInternal(PRICE, value);
    }

    /**
     * Gets the attribute value for ROWID using the alias name RowID.
     * @return the ROWID
     */
    public RowID getRowID() {
        return (RowID) getAttributeInternal(ROWID);
    }

    /**
     * Sets <code>value</code> as attribute value for ROWID using the alias name RowID.
     * @param value value to set the ROWID
     */
    public void setRowID(RowID value) {
        setAttributeInternal(ROWID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
