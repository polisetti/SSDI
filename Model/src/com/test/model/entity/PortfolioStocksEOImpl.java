package com.test.model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Mar 17 20:09:33 EDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PortfolioStocksEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Portfolioid {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getPortfolioid();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setPortfolioid((Number)value);
            }
        }
        ,
        Stockid {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getStockid();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setStockid((Number)value);
            }
        }
        ,
        Dateadded {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getDateadded();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setDateadded((Number)value);
            }
        }
        ,
        Timeadded {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getTimeadded();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setTimeadded((Number)value);
            }
        }
        ,
        RowID {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getRowID();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UserPortfoliosEO {
            public Object get(PortfolioStocksEOImpl obj) {
                return obj.getUserPortfoliosEO();
            }

            public void put(PortfolioStocksEOImpl obj, Object value) {
                obj.setUserPortfoliosEO((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PortfolioStocksEOImpl object);

        public abstract void put(PortfolioStocksEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PORTFOLIOID = AttributesEnum.Portfolioid.index();
    public static final int STOCKID = AttributesEnum.Stockid.index();
    public static final int DATEADDED = AttributesEnum.Dateadded.index();
    public static final int TIMEADDED = AttributesEnum.Timeadded.index();
    public static final int ROWID = AttributesEnum.RowID.index();
    public static final int USERPORTFOLIOSEO = AttributesEnum.UserPortfoliosEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PortfolioStocksEOImpl() {
    }

    /**
     * Gets the attribute value for Portfolioid, using the alias name Portfolioid.
     * @return the Portfolioid
     */
    public Number getPortfolioid() {
        return (Number)getAttributeInternal(PORTFOLIOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Portfolioid.
     * @param value value to set the Portfolioid
     */
    public void setPortfolioid(Number value) {
        setAttributeInternal(PORTFOLIOID, value);
    }

    /**
     * Gets the attribute value for Stockid, using the alias name Stockid.
     * @return the Stockid
     */
    public Number getStockid() {
        return (Number)getAttributeInternal(STOCKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Stockid.
     * @param value value to set the Stockid
     */
    public void setStockid(Number value) {
        setAttributeInternal(STOCKID, value);
    }

    /**
     * Gets the attribute value for Dateadded, using the alias name Dateadded.
     * @return the Dateadded
     */
    public Number getDateadded() {
        return (Number)getAttributeInternal(DATEADDED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Dateadded.
     * @param value value to set the Dateadded
     */
    public void setDateadded(Number value) {
        setAttributeInternal(DATEADDED, value);
    }

    /**
     * Gets the attribute value for Timeadded, using the alias name Timeadded.
     * @return the Timeadded
     */
    public Number getTimeadded() {
        return (Number)getAttributeInternal(TIMEADDED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Timeadded.
     * @param value value to set the Timeadded
     */
    public void setTimeadded(Number value) {
        setAttributeInternal(TIMEADDED, value);
    }

    /**
     * Gets the attribute value for RowID, using the alias name RowID.
     * @return the RowID
     */
    public RowID getRowID() {
        return (RowID)getAttributeInternal(ROWID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getUserPortfoliosEO() {
        return (EntityImpl)getAttributeInternal(USERPORTFOLIOSEO);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setUserPortfoliosEO(EntityImpl value) {
        setAttributeInternal(USERPORTFOLIOSEO, value);
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("com.test.model.entity.PortfolioStocksEO");
        }
        return mDefinitionObject;
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
