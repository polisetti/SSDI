package com.test.model.am;

import com.test.model.am.common.SSDI_AM;
import com.test.model.view.PortfolioStocksVOImpl;
import com.test.model.view.PortfolioStocksVORowImpl;

import com.test.model.view.StockDetailsROVOImpl;

import com.test.model.view.StockDetailsROVORowImpl;


import com.test.model.view.StockPricesVOImpl;

import com.test.model.view.TestStockPricesVOImpl;

import com.test.model.view.TestStockPricesVORowImpl;

import java.sql.SQLException;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.TooManyObjectsException;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 22 11:17:03 EDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SSDI_AMImpl extends ApplicationModuleImpl implements SSDI_AM {
    /**
     * This is the default constructor (do not remove).
     */
    public SSDI_AMImpl() {
    }


    /**
     * Container's getter for UserDetailsVO.
     * @return UserDetailsVO
     */
    public ViewObjectImpl getUserDetailsVO() {
        return (ViewObjectImpl)findViewObject("UserDetailsVO");
    }

    /**
     * Container's getter for UserPortfoliosVO.
     * @return UserPortfoliosVO
     */
    public ViewObjectImpl getUserPortfoliosVO() {
        return (ViewObjectImpl)findViewObject("UserPortfoliosVO");
    }

    /**
     * Container's getter for UserPortfolioNamesROVO.
     * @return UserPortfolioNamesROVO
     */
    public ViewObjectImpl getUserPortfolioNamesROVO() {
        return (ViewObjectImpl)findViewObject("UserPortfolioNamesROVO");
    }

    /**
     * @param stockID1
     * @param stockID2
     */
    public void compareStocks(int stockID1, int stockID2) {
        System.out.println("In the CompareStocks Method \n");
        PortfolioStocksVORowImpl rowImpl =
            (PortfolioStocksVORowImpl)getPortfolioStocksVO().getCurrentRow();
        oracle.jbo.domain.Number pfID = rowImpl.getPortfolioid();
        System.out.println(pfID);
    }

    public void initialScreen(int portfolioID) {
        //System.out.println("\n\n\n In the initial screen method \n\n");
        PortfolioStocksVOImpl vo = getPortfolioStocksVO();
        //Number numb = (Number)2;
        Number num = new Number(2);
        vo.setBindPortfolioID(2);
        vo.executeQuery();
        //System.out.println("\n\n\n End initial screen method \n\n");
    }

    public void initialScreen() {
        //System.out.println("\n\n\n In the initial screen method \n\n");
        PortfolioStocksVOImpl vo = getPortfolioStocksVO();
        //Number numb = (Number)2;
        Number num = new Number(2);
        vo.setBindPortfolioID(2);
        vo.executeQuery();
        //System.out.println("\n\n\n End initial screen method \n\n");
    }

    public void displayGraph(String pStockName) {
        Number stockID = this.getStockID(pStockName);
        StockPricesVOImpl vo = getStockPricesVO();
        vo.setBindStockID(stockID);
        vo.executeQuery();
    }

    public Number getStockID(String pStockName) {
        StockDetailsROVOImpl stockDetailsVO = this.getStockDetailsROVO();

        ViewCriteria vc =
            stockDetailsVO.getViewCriteria("StockDetailsROVVOgetIDCriteria");
        vc.resetCriteria();
        stockDetailsVO.setBindStockName(pStockName);
        stockDetailsVO.applyViewCriteria(vc);
        stockDetailsVO.executeQuery();

        // parsing the VO results
        StockDetailsROVORowImpl resultRow =
            (StockDetailsROVORowImpl)stockDetailsVO.first();
        return resultRow.getStockid();
    }

    public String getStockName(Number pStockID) {
        StockDetailsROVOImpl stockDetailsVO = this.getStockDetailsROVO();

        ViewCriteria vc =
            stockDetailsVO.getViewCriteria("StockDetailsROVOGetNameCriteria");
        vc.resetCriteria();
        stockDetailsVO.setBindStockID(pStockID);
        stockDetailsVO.applyViewCriteria(vc);
        stockDetailsVO.executeQuery();

        // parsing the VO results
        StockDetailsROVORowImpl resultRow =
            (StockDetailsROVORowImpl)stockDetailsVO.first();
        return resultRow.getStockname();
    }


    public void addStocksToPortfolio(Number stockID) {
        PortfolioStocksVOImpl vo = getPortfolioStocksVO();
        //PortfolioStocksVORowImpl currentRow = (PortfolioStocksVORowImpl)getPortfolioStocksVO().getCurrentRow();

        //System.out.println(currentRow.getStockid());
        //System.out.println(currentRow.getTimeadded());

        try {
            PortfolioStocksVORowImpl row =
                (PortfolioStocksVORowImpl)vo.createRow();

            //TODO Update the logic to get the stock number and pfID
            Number pfID = new Number(2);

            // get the current time and date
            DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
            DateFormat timeFormat = new SimpleDateFormat("HHmm");

            Date date = new Date();
            Number dateAdded =
                new Number(Integer.parseInt(dateFormat.format(date)));
            Number timeAdded =
                new Number(Integer.parseInt(timeFormat.format(date)));
            dateFormat = new SimpleDateFormat("HHmm");

            //Create the actual row entries
            row.setPortfolioid(pfID);
            row.setDateadded(dateAdded);
            row.setTimeadded(timeAdded);
            row.setStockid(stockID);
        } catch (TooManyObjectsException ex) {
            throw new JboException(ex.getMessage());
        }

        this.getDBTransaction().commit();
    }

    public void deleteStocksFromPortfolio(int stockID, int portfolioID) {

    }

    public void deletePortfolio(int portfolioID) {

    }

    public List<String> autoComplete(String inputValue) {
        //Execute the query here.
        System.out.println("The input value is: " + inputValue);
        List<String> outputList = new ArrayList<String>();

        StockDetailsROVOImpl vo = getStockDetailsROVO();

        vo.executeQuery();
        RowSetIterator it = vo.createRowSetIterator(null);

        while (it.hasNext()) {
            StockDetailsROVORowImpl newRow =
                (StockDetailsROVORowImpl)it.next();
            if (newRow.getStockname().toLowerCase().startsWith(inputValue)) {
                outputList.add(newRow.getStockname());
                System.out.println(newRow.getStockname());
            }
        }
        vo.clearCache();
        it.closeRowSetIterator();
        return outputList;
    }
    
    public Map<Number, Double> getThePastPrices(Number stockID, Number stDate, Number enDate) throws SQLException {
        Map<Number, Double> m = new HashMap<Number, Double>();
        System.out.println("Printing the input parameters");
        System.out.println(stockID);
        System.out.println(stDate);
        System.out.println(enDate);
        
        //get VO instance
        TestStockPricesVOImpl tspVO = getTestStockPricesVO();

        //get VC instance
        ViewCriteria vc =
            tspVO.getViewCriteria("GetStockPricesInGivenDateRangeCriteria");
        vc.resetCriteria();

        //set All the bind parameters
        tspVO.setBindStockID(stockID);
        tspVO.setBindStartDate(stDate);
        tspVO.setBindEndDate(enDate);
        
        //apply the view criteria
        tspVO.applyViewCriteria(vc);
        
        //execute the view Object programatically
        tspVO.executeQuery();
        System.out.print("Row count: ");
        System.out.println(tspVO.getRowCount());

        //Iterate through the results
        RowSetIterator it = tspVO.createRowSetIterator(null);
        while (it.hasNext()) {
            TestStockPricesVORowImpl newRow = (TestStockPricesVORowImpl)it.next();
            Number datetracked = newRow.getDatetracked();
            Number timetracked = newRow.getTimetracked();
            Number price = newRow.getPrice();
            System.out.print(datetracked);
            System.out.print( "\t");
            System.out.print(timetracked);
            System.out.print( "\t");
            System.out.println(price);
            
            m.put(datetracked, price.doubleValue());
        }
        it.closeRowSetIterator();
        return m;
    }
   
    /**
     * Container's getter for PortfolioStocksVO.
     * @return PortfolioStocksVO
     */
    public PortfolioStocksVOImpl getPortfolioStocksVO() {
        return (PortfolioStocksVOImpl)findViewObject("PortfolioStocksVO");
    }

    /**
     * Container's getter for StockDetailsROVVO.
     * @return StockDetailsROVVO
     */
    public StockDetailsROVOImpl getStockDetailsROVO() {
        return (StockDetailsROVOImpl)findViewObject("StockDetailsROVO");
    }

    /**
     * Container's getter for StockPricesVO.
     * @return StockPricesVO
     */
    public StockPricesVOImpl getStockPricesVO() {
        return (StockPricesVOImpl)findViewObject("StockPricesVO");
    }

    /**
     * Container's getter for StockPricesROVO.
     * @return StockPricesROVO
     */
    public ViewObjectImpl getStockPricesROVO() {
        return (ViewObjectImpl)findViewObject("StockPricesROVO");
    }

    /**
     * Container's getter for TestPortfolioStocksVO.
     * @return TestPortfolioStocksVO
     */
    public ViewObjectImpl getTestPortfolioStocksVO() {
        return (ViewObjectImpl)findViewObject("TestPortfolioStocksVO");
    }

    /**
     * Container's getter for PortfolioStocks2.
     * @return PortfolioStocks2
     */
    public ViewObjectImpl getPortfolioStocks2() {
        return (ViewObjectImpl)findViewObject("PortfolioStocks2");
    }

    /**
     * Container's getter for TestStockPricesVO.
     * @return TestStockPricesVO
     */
    public TestStockPricesVOImpl getTestStockPricesVO() {
        return (TestStockPricesVOImpl)findViewObject("TestStockPricesVO");
    }
}
